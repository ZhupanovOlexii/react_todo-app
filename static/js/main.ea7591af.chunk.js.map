{"version":3,"sources":["TodoItem.js","TodoList.js","NewTodo.js","Header.js","Filters.js","Footer.js","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","changeStatus","className","classNames","completed","key","id","type","checked","onChange","htmlFor","title","onClick","TodoList","todos","markAll","length","every","map","NewTodo","state","handleSetTitle","target","value","trim","setState","resetForm","prevState","handleSubmit","event","preventDefault","addNewTodo","props","this","onSubmit","placeholder","React","Component","Header","buttons","name","Filters","typeOfFilter","changeFilter","button","href","selected","Footer","clearCompleted","countOfNotFinishedTodos","filters","App","filter","listOfVisibleTodos","visibleTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea7591af.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TodoItem = ({ todo, deleteTodo, changeStatus }) => (\n  <li\n    className={classNames({\n      completed: todo.completed,\n    })}\n    key={todo.id}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        checked={todo.completed}\n        id={todo.id}\n        onChange={() => changeStatus(todo.id)}\n      />\n      <label\n        htmlFor={todo.id}\n      >\n        {todo.title}\n      </label>\n      <button\n        id={todo.id}\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteTodo(todo.id)}\n      />\n    </div>\n    <input\n      type=\"text\"\n      className=\"edit\"\n    />\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, deleteTodo, changeStatus, markAll }) => (\n  <section className=\"main\">\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={todos.length > 0 && todos.every(todo => todo.completed)}\n      onChange={() => markAll()}\n    />\n    {todos.length > 0 && (\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    )}\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          changeStatus={changeStatus}\n          key={todo.id}\n          deleteTodo={deleteTodo}\n        />\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  })).isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  markAll: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    title: '',\n    id: 0,\n    completed: false,\n\n  }\n\n  handleSetTitle = ({ target }) => {\n    if (target.value.trim() !== '') {\n      this.setState({\n        title: target.value,\n      });\n    }\n  }\n\n  resetForm = () => {\n    this.setState(prevState => (\n      {\n        title: '',\n        id: prevState.id + 1,\n        completed: false,\n      }\n    ));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, id, completed } = this.state;\n    const { addNewTodo } = this.props;\n\n    if (!title.length) {\n      this.setState({\n        title: '',\n      });\n\n      return;\n    }\n\n    addNewTodo({\n      title,\n      id: id + 1,\n      completed,\n\n    });\n\n    this.resetForm();\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.handleSetTitle}\n          value={title}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport NewTodo from './NewTodo';\n\nconst Header = ({ addNewTodo }) => (\n  <>\n    <header className=\"header\">\n      <h1>todos</h1>\n    </header>\n    <NewTodo\n      addNewTodo={addNewTodo}\n    />\n  </>\n);\n\nHeader.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst buttons = [\n  {\n    name: 'All',\n  },\n  {\n    name: 'Active',\n  },\n  {\n    name: 'Completed',\n  },\n];\n\nconst Filters = ({ typeOfFilter, changeFilter }) => (\n\n  <ul className=\"filters\">\n    {buttons.map(button => (\n      <li key={button.name}>\n        <a\n          href={`#/${button.name}`}\n          className={classNames({\n            selected: typeOfFilter === `${button.name}`,\n          })}\n          onClick={() => changeFilter(`${button.name}`)}\n        >\n          {button.name}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nFilters.propTypes = {\n  typeOfFilter: PropTypes.string.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filters;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Filters from './Filters';\n\nconst Footer = ({\n  changeFilter,\n  clearCompleted,\n  countOfNotFinishedTodos,\n  typeOfFilter,\n}) => (\n\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {countOfNotFinishedTodos}\n      {' '}\n      items left\n    </span>\n    <Filters\n      typeOfFilter={typeOfFilter}\n      changeFilter={changeFilter}\n    />\n    <button\n      type=\"button\"\n      onClick={clearCompleted}\n      className=\"clear-completed\"\n    >\n      Clear completed\n    </button>\n  </footer>\n\n);\n\nFooter.propTypes = {\n  changeFilter: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  countOfNotFinishedTodos: PropTypes.number.isRequired,\n  typeOfFilter: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst filters = {\n  active: 'Active',\n  completed: 'Completed',\n  all: 'All',\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    typeOfFilter: filters.all,\n  }\n\n  addNewTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  markAll = () => {\n    if (this.state.todos.every(todo => todo.completed === true)) {\n      this.setState(state => ({\n        todos: state.todos.map(todo => (\n          {\n            ...todo,\n            completed: false,\n          }\n        )),\n      }));\n    } else {\n      this.setState(state => ({\n        todos: state.todos.map(todo => (\n          {\n            ...todo,\n            completed: true,\n          }\n        )),\n      }));\n    }\n  }\n\n  changeStatus = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  deleteTodo = (id) => {\n    this.setState(({ todos }) => ({\n      todos: todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  listOfVisibleTodos = () => {\n    const { todos, typeOfFilter } = this.state;\n\n    if (typeOfFilter === filters.completed) {\n      return todos.filter(todo => todo.completed);\n    }\n\n    if (typeOfFilter === filters.active) {\n      return todos.filter(todo => !todo.completed);\n    }\n\n    return todos;\n  }\n\n  changeFilter = (filter) => {\n    this.setState({\n      typeOfFilter: filter,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, typeOfFilter, changeFilter } = this.state;\n    const countOfNotFinishedTodos = todos\n      .filter(todo => todo.completed === false).length;\n    const visibleTodos = this.listOfVisibleTodos(changeFilter);\n\n    return (\n      <section className=\"todoapp\">\n        <Header addNewTodo={this.addNewTodo} />\n        <TodoList\n          todos={visibleTodos}\n          changeStatus={this.changeStatus}\n          deleteTodo={this.deleteTodo}\n          markAll={this.markAll}\n        />\n        {todos.length > 0\n          && (\n            <Footer\n              typeOfFilter={typeOfFilter}\n              changeFilter={this.changeFilter}\n              countOfNotFinishedTodos={countOfNotFinishedTodos}\n              clearCompleted={this.clearCompleted}\n            />\n          )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
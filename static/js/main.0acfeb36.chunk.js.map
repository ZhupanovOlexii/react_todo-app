{"version":3,"sources":["TodoItem.js","TodoList.js","NewTodo.js","Filters.js","App.js","index.js"],"names":["TodoItem","this","props","todo","deleteTodo","handleChangeStatus","className","classNames","completed","key","id","type","checked","onChange","htmlFor","title","onClick","React","PureComponent","TodoList","todos","handleMarkAll","length","every","map","NewTodo","state","handleSetTitle","target","setState","value","trimLeft","replace","resetForm","prevState","handleSubmit","event","preventDefault","addNewTodo","onSubmit","placeholder","Component","Filters","typeOfFilter","handleChangeFilter","href","selected","App","indexOfDeletedTodo","findIndex","item","newListOfTodos","splice","filter","clearCompleted","countOfNotFinishedTodos","visibleTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0acfeb36.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nclass TodoItem extends React.PureComponent {\n  render() {\n    const { todo, deleteTodo, handleChangeStatus } = this.props;\n\n    return (\n      <>\n        <li\n          className={classNames({\n            completed: todo.completed,\n          })}\n          key={todo.id}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              checked={todo.completed}\n              id={todo.id}\n              onChange={() => handleChangeStatus(todo.id)\n              }\n            />\n            <label\n              htmlFor={todo.id}\n            >\n              {todo.title}\n            </label>\n            <button\n              id={todo.id}\n              type=\"button\"\n              className=\"destroy\"\n              onClick={deleteTodo}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n          />\n        </li>\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n\n  handleChangeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nclass TodoList extends React.PureComponent {\n  render() {\n    const { todos, deleteTodo, handleChangeStatus, handleMarkAll } = this.props;\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={todos.length > 0 && todos.every(todo => todo.completed)}\n          onChange={handleMarkAll}\n        />\n        {todos.length > 0 && (\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        )}\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <TodoItem\n              todo={todo}\n              handleChangeStatus={handleChangeStatus}\n              key={todo.id}\n              deleteTodo={deleteTodo}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  })).isRequired,\n  handleChangeStatus: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  handleMarkAll: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NewTodo extends React.Component {\n  state = {\n    title: '',\n    id: 0,\n    completed: false,\n\n  }\n\n  handleSetTitle = ({ target }) => {\n    this.setState({\n      title: target.value.trimLeft().replace(/[^a-z\\s]/gi, ''),\n    });\n  }\n\n  resetForm = () => {\n    this.setState(prevState => (\n      {\n        title: '',\n        id: prevState.id + 1,\n        completed: false,\n      }\n    ));\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, id, completed } = this.state;\n    const { addNewTodo } = this.props;\n\n    if (!title.length) {\n      this.setState({\n        title: '',\n      });\n\n      return;\n    }\n\n    addNewTodo({\n      title,\n      id: id + 1,\n      completed,\n\n    });\n\n    this.resetForm();\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.handleSetTitle}\n          value={title}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n\nexport default NewTodo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Filters = ({ typeOfFilter, handleChangeFilter }) => (\n\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({ selected: typeOfFilter === 'All' })}\n        onClick={() => handleChangeFilter('All')}\n      >\n        All\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({ selected: typeOfFilter === 'Active' })}\n        onClick={() => handleChangeFilter('Active')}\n      >\n        Active\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({ selected: typeOfFilter === 'Completed' })}\n        onClick={() => handleChangeFilter('Completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nFilters.propTypes = {\n  typeOfFilter: PropTypes.string.isRequired,\n  handleChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filters;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport NewTodo from './NewTodo';\nimport Filters from './Filters';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    typeOfFilter: 'All',\n  }\n\n  addNewTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  handleMarkAll =() => {\n    if (this.state.todos.every(todo => todo.completed === true)) {\n      this.setState(state => ({\n        todos: state.todos.map(todo => (\n          {\n            ...todo,\n            completed: false,\n          }\n        )),\n      }));\n    } else {\n      this.setState(state => ({\n        todos: state.todos.map(todo => (\n          {\n            ...todo,\n            completed: true,\n          }\n        )),\n      }));\n    }\n  }\n\n  handleChangeStatus = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  deleteTodo = ({ target }) => {\n    const indexOfDeletedTodo = this.state.todos\n      .findIndex(item => item.id === +target.id);\n\n    this.setState((prevState) => {\n      const newListOfTodos = [...prevState.todos];\n\n      newListOfTodos.splice(indexOfDeletedTodo, 1);\n\n      return (\n        { todos: [...newListOfTodos] }\n      );\n    });\n  }\n\n  handleChangeFilter = (filter) => {\n    this.setState({\n      typeOfFilter: filter,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, typeOfFilter } = this.state;\n    const countOfNotFinishedTodos = todos\n      .filter(todo => todo.completed === false).length;\n    let visibleTodos = [...todos];\n\n    if (typeOfFilter === 'All') {\n      visibleTodos = [...todos];\n    }\n\n    if (typeOfFilter === 'Completed') {\n      visibleTodos = todos.filter(todo => todo.completed);\n    }\n\n    if (typeOfFilter === 'Active') {\n      visibleTodos = todos.filter(todo => !todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n        </header>\n        <NewTodo\n          addNewTodo={this.addNewTodo}\n        />\n        <TodoList\n          todos={visibleTodos}\n          handleChangeStatus={this.handleChangeStatus}\n          deleteTodo={this.deleteTodo}\n          handleMarkAll={this.handleMarkAll}\n        />\n        {todos.length > 0\n          && (\n            <footer className=\"footer\">\n              <span className=\"todo-count\">\n                {countOfNotFinishedTodos}\n                {' '}\n                items left\n              </span>\n              <Filters\n                typeOfFilter={typeOfFilter}\n                handleChangeFilter={this.handleChangeFilter}\n              />\n              <button\n                type=\"button\"\n                onClick={this.clearCompleted}\n                className=\"clear-completed\"\n              >\n                Clear completed\n              </button>\n            </footer>\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}